
UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000003dc  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000014  08000564  08000564  00001564  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000578  08000578  00002004  2**0
                  CONTENTS
  4 .ARM          00000000  08000578  08000578  00002004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000578  08000578  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000578  08000578  00001578  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800057c  0800057c  0000157c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  08000580  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00002004  2**0
                  CONTENTS
 10 .bss          00000020  20000004  20000004  00002004  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000024  20000024  00002004  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001680  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000636  00000000  00000000  000036b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000210  00000000  00000000  00003cf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000016d  00000000  00000000  00003f00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001694  00000000  00000000  0000406d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002798  00000000  00000000  00005701  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bbca0  00000000  00000000  00007e99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000c3b39  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000005e4  00000000  00000000  000c3b7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000046  00000000  00000000  000c4160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800054c 	.word	0x0800054c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	0800054c 	.word	0x0800054c

080001c8 <main>:
#include "UART.h"
int main(){
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b086      	sub	sp, #24
 80001cc:	af00      	add	r7, sp, #0
	USART1_Init();
 80001ce:	f000 f8f5 	bl	80003bc <USART1_Init>
	uint8_t data[]="ABCDE";
 80001d2:	4a1b      	ldr	r2, [pc, #108]	@ (8000240 <main+0x78>)
 80001d4:	f107 0310 	add.w	r3, r7, #16
 80001d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80001dc:	6018      	str	r0, [r3, #0]
 80001de:	3304      	adds	r3, #4
 80001e0:	8019      	strh	r1, [r3, #0]
	uint8_t data1[]="ABCDEFGHJK";
 80001e2:	4a18      	ldr	r2, [pc, #96]	@ (8000244 <main+0x7c>)
 80001e4:	1d3b      	adds	r3, r7, #4
 80001e6:	ca07      	ldmia	r2, {r0, r1, r2}
 80001e8:	c303      	stmia	r3!, {r0, r1}
 80001ea:	801a      	strh	r2, [r3, #0]
 80001ec:	3302      	adds	r3, #2
 80001ee:	0c12      	lsrs	r2, r2, #16
 80001f0:	701a      	strb	r2, [r3, #0]
	USART1_Transmit(data, 6);
 80001f2:	f107 0310 	add.w	r3, r7, #16
 80001f6:	2106      	movs	r1, #6
 80001f8:	4618      	mov	r0, r3
 80001fa:	f000 f93f 	bl	800047c <USART1_Transmit>
	USART1_Transmit(data1, 11);
 80001fe:	1d3b      	adds	r3, r7, #4
 8000200:	210b      	movs	r1, #11
 8000202:	4618      	mov	r0, r3
 8000204:	f000 f93a 	bl	800047c <USART1_Transmit>
	USART1_Transmit(data, 6);
 8000208:	f107 0310 	add.w	r3, r7, #16
 800020c:	2106      	movs	r1, #6
 800020e:	4618      	mov	r0, r3
 8000210:	f000 f934 	bl	800047c <USART1_Transmit>
	USART1_Transmit(data1, 11);
 8000214:	1d3b      	adds	r3, r7, #4
 8000216:	210b      	movs	r1, #11
 8000218:	4618      	mov	r0, r3
 800021a:	f000 f92f 	bl	800047c <USART1_Transmit>
	USART1_Transmit(data, 6);
 800021e:	f107 0310 	add.w	r3, r7, #16
 8000222:	2106      	movs	r1, #6
 8000224:	4618      	mov	r0, r3
 8000226:	f000 f929 	bl	800047c <USART1_Transmit>
	USART1_Transmit(data1, 11);
 800022a:	1d3b      	adds	r3, r7, #4
 800022c:	210b      	movs	r1, #11
 800022e:	4618      	mov	r0, r3
 8000230:	f000 f924 	bl	800047c <USART1_Transmit>
 8000234:	2300      	movs	r3, #0
}
 8000236:	4618      	mov	r0, r3
 8000238:	3718      	adds	r7, #24
 800023a:	46bd      	mov	sp, r7
 800023c:	bd80      	pop	{r7, pc}
 800023e:	bf00      	nop
 8000240:	08000564 	.word	0x08000564
 8000244:	0800056c 	.word	0x0800056c

08000248 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000248:	b480      	push	{r7}
 800024a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800024c:	bf00      	nop
 800024e:	e7fd      	b.n	800024c <NMI_Handler+0x4>

08000250 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000250:	b480      	push	{r7}
 8000252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000254:	bf00      	nop
 8000256:	e7fd      	b.n	8000254 <HardFault_Handler+0x4>

08000258 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000258:	b480      	push	{r7}
 800025a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800025c:	bf00      	nop
 800025e:	e7fd      	b.n	800025c <MemManage_Handler+0x4>

08000260 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000260:	b480      	push	{r7}
 8000262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000264:	bf00      	nop
 8000266:	e7fd      	b.n	8000264 <BusFault_Handler+0x4>

08000268 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000268:	b480      	push	{r7}
 800026a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800026c:	bf00      	nop
 800026e:	e7fd      	b.n	800026c <UsageFault_Handler+0x4>

08000270 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000270:	b480      	push	{r7}
 8000272:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000274:	bf00      	nop
 8000276:	46bd      	mov	sp, r7
 8000278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800027c:	4770      	bx	lr

0800027e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800027e:	b480      	push	{r7}
 8000280:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000282:	bf00      	nop
 8000284:	46bd      	mov	sp, r7
 8000286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028a:	4770      	bx	lr

0800028c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800028c:	b480      	push	{r7}
 800028e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000290:	bf00      	nop
 8000292:	46bd      	mov	sp, r7
 8000294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000298:	4770      	bx	lr

0800029a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800029a:	b580      	push	{r7, lr}
 800029c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800029e:	f000 f91d 	bl	80004dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80002a2:	bf00      	nop
 80002a4:	bd80      	pop	{r7, pc}
	...

080002a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80002a8:	b480      	push	{r7}
 80002aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80002ac:	4b06      	ldr	r3, [pc, #24]	@ (80002c8 <SystemInit+0x20>)
 80002ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80002b2:	4a05      	ldr	r2, [pc, #20]	@ (80002c8 <SystemInit+0x20>)
 80002b4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80002b8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80002bc:	bf00      	nop
 80002be:	46bd      	mov	sp, r7
 80002c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c4:	4770      	bx	lr
 80002c6:	bf00      	nop
 80002c8:	e000ed00 	.word	0xe000ed00

080002cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80002cc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000304 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80002d0:	f7ff ffea 	bl	80002a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80002d4:	480c      	ldr	r0, [pc, #48]	@ (8000308 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80002d6:	490d      	ldr	r1, [pc, #52]	@ (800030c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80002d8:	4a0d      	ldr	r2, [pc, #52]	@ (8000310 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80002da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002dc:	e002      	b.n	80002e4 <LoopCopyDataInit>

080002de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002e2:	3304      	adds	r3, #4

080002e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002e8:	d3f9      	bcc.n	80002de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002ea:	4a0a      	ldr	r2, [pc, #40]	@ (8000314 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80002ec:	4c0a      	ldr	r4, [pc, #40]	@ (8000318 <LoopFillZerobss+0x22>)
  movs r3, #0
 80002ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002f0:	e001      	b.n	80002f6 <LoopFillZerobss>

080002f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002f4:	3204      	adds	r2, #4

080002f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002f8:	d3fb      	bcc.n	80002f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80002fa:	f000 f903 	bl	8000504 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80002fe:	f7ff ff63 	bl	80001c8 <main>
  bx  lr    
 8000302:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000304:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000308:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800030c:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000310:	08000580 	.word	0x08000580
  ldr r2, =_sbss
 8000314:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000318:	20000024 	.word	0x20000024

0800031c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800031c:	e7fe      	b.n	800031c <ADC_IRQHandler>
	...

08000320 <GPIO_UART1_Setup>:
#include "GPIO.h"

void GPIO_UART1_Setup(){
 8000320:	b480      	push	{r7}
 8000322:	af00      	add	r7, sp, #0
    GPIOA_CLOCK_ENABLE();
 8000324:	4b23      	ldr	r3, [pc, #140]	@ (80003b4 <GPIO_UART1_Setup+0x94>)
 8000326:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000328:	4a22      	ldr	r2, [pc, #136]	@ (80003b4 <GPIO_UART1_Setup+0x94>)
 800032a:	f043 0301 	orr.w	r3, r3, #1
 800032e:	6313      	str	r3, [r2, #48]	@ 0x30

    // PA9- TX
    GPIOA->MODER    |= (0x2<<18);
 8000330:	4b21      	ldr	r3, [pc, #132]	@ (80003b8 <GPIO_UART1_Setup+0x98>)
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	4a20      	ldr	r2, [pc, #128]	@ (80003b8 <GPIO_UART1_Setup+0x98>)
 8000336:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800033a:	6013      	str	r3, [r2, #0]
    GPIOA->OTYPER   &= ~(1<<9);
 800033c:	4b1e      	ldr	r3, [pc, #120]	@ (80003b8 <GPIO_UART1_Setup+0x98>)
 800033e:	685b      	ldr	r3, [r3, #4]
 8000340:	4a1d      	ldr	r2, [pc, #116]	@ (80003b8 <GPIO_UART1_Setup+0x98>)
 8000342:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8000346:	6053      	str	r3, [r2, #4]
    GPIOA->OSPEEDR  |= (0x2<<18);
 8000348:	4b1b      	ldr	r3, [pc, #108]	@ (80003b8 <GPIO_UART1_Setup+0x98>)
 800034a:	689b      	ldr	r3, [r3, #8]
 800034c:	4a1a      	ldr	r2, [pc, #104]	@ (80003b8 <GPIO_UART1_Setup+0x98>)
 800034e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000352:	6093      	str	r3, [r2, #8]
    GPIOA->PUPDR    |= (0X1<<18);
 8000354:	4b18      	ldr	r3, [pc, #96]	@ (80003b8 <GPIO_UART1_Setup+0x98>)
 8000356:	68db      	ldr	r3, [r3, #12]
 8000358:	4a17      	ldr	r2, [pc, #92]	@ (80003b8 <GPIO_UART1_Setup+0x98>)
 800035a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800035e:	60d3      	str	r3, [r2, #12]

    // PA10- RX
    GPIOA->MODER    |= (0x2<<20);
 8000360:	4b15      	ldr	r3, [pc, #84]	@ (80003b8 <GPIO_UART1_Setup+0x98>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	4a14      	ldr	r2, [pc, #80]	@ (80003b8 <GPIO_UART1_Setup+0x98>)
 8000366:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800036a:	6013      	str	r3, [r2, #0]
    GPIOA->OTYPER   &= ~(1<<10);
 800036c:	4b12      	ldr	r3, [pc, #72]	@ (80003b8 <GPIO_UART1_Setup+0x98>)
 800036e:	685b      	ldr	r3, [r3, #4]
 8000370:	4a11      	ldr	r2, [pc, #68]	@ (80003b8 <GPIO_UART1_Setup+0x98>)
 8000372:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000376:	6053      	str	r3, [r2, #4]
    GPIOA->OSPEEDR  |= (0x2<<20);
 8000378:	4b0f      	ldr	r3, [pc, #60]	@ (80003b8 <GPIO_UART1_Setup+0x98>)
 800037a:	689b      	ldr	r3, [r3, #8]
 800037c:	4a0e      	ldr	r2, [pc, #56]	@ (80003b8 <GPIO_UART1_Setup+0x98>)
 800037e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000382:	6093      	str	r3, [r2, #8]
    GPIOA->PUPDR    |= (0x1<<20);
 8000384:	4b0c      	ldr	r3, [pc, #48]	@ (80003b8 <GPIO_UART1_Setup+0x98>)
 8000386:	68db      	ldr	r3, [r3, #12]
 8000388:	4a0b      	ldr	r2, [pc, #44]	@ (80003b8 <GPIO_UART1_Setup+0x98>)
 800038a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800038e:	60d3      	str	r3, [r2, #12]

    //
    GPIOA->AFRH     |= (0x7<<4);
 8000390:	4b09      	ldr	r3, [pc, #36]	@ (80003b8 <GPIO_UART1_Setup+0x98>)
 8000392:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000394:	4a08      	ldr	r2, [pc, #32]	@ (80003b8 <GPIO_UART1_Setup+0x98>)
 8000396:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 800039a:	6253      	str	r3, [r2, #36]	@ 0x24
    GPIOA->AFRH     |= (0x7<<8);
 800039c:	4b06      	ldr	r3, [pc, #24]	@ (80003b8 <GPIO_UART1_Setup+0x98>)
 800039e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80003a0:	4a05      	ldr	r2, [pc, #20]	@ (80003b8 <GPIO_UART1_Setup+0x98>)
 80003a2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80003a6:	6253      	str	r3, [r2, #36]	@ 0x24
}
 80003a8:	bf00      	nop
 80003aa:	46bd      	mov	sp, r7
 80003ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b0:	4770      	bx	lr
 80003b2:	bf00      	nop
 80003b4:	40023800 	.word	0x40023800
 80003b8:	40020000 	.word	0x40020000

080003bc <USART1_Init>:
 *      Author: ASUS
 */

#include "UART.h"

void USART1_Init(){
 80003bc:	b580      	push	{r7, lr}
 80003be:	b084      	sub	sp, #16
 80003c0:	af00      	add	r7, sp, #0
    USART1_CLOCK_ENABLE();
 80003c2:	4b2b      	ldr	r3, [pc, #172]	@ (8000470 <USART1_Init+0xb4>)
 80003c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80003c6:	4a2a      	ldr	r2, [pc, #168]	@ (8000470 <USART1_Init+0xb4>)
 80003c8:	f043 0310 	orr.w	r3, r3, #16
 80003cc:	6453      	str	r3, [r2, #68]	@ 0x44
    GPIO_UART1_Setup();
 80003ce:	f7ff ffa7 	bl	8000320 <GPIO_UART1_Setup>

    USART1->CR1 &= ~(1<<12);
 80003d2:	4b28      	ldr	r3, [pc, #160]	@ (8000474 <USART1_Init+0xb8>)
 80003d4:	68db      	ldr	r3, [r3, #12]
 80003d6:	4a27      	ldr	r2, [pc, #156]	@ (8000474 <USART1_Init+0xb8>)
 80003d8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80003dc:	60d3      	str	r3, [r2, #12]
    USART1->CR1 &= ~(1<<10);
 80003de:	4b25      	ldr	r3, [pc, #148]	@ (8000474 <USART1_Init+0xb8>)
 80003e0:	68db      	ldr	r3, [r3, #12]
 80003e2:	4a24      	ldr	r2, [pc, #144]	@ (8000474 <USART1_Init+0xb8>)
 80003e4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80003e8:	60d3      	str	r3, [r2, #12]
    USART1->CR1 |= 1<<3;
 80003ea:	4b22      	ldr	r3, [pc, #136]	@ (8000474 <USART1_Init+0xb8>)
 80003ec:	68db      	ldr	r3, [r3, #12]
 80003ee:	4a21      	ldr	r2, [pc, #132]	@ (8000474 <USART1_Init+0xb8>)
 80003f0:	f043 0308 	orr.w	r3, r3, #8
 80003f4:	60d3      	str	r3, [r2, #12]
    USART1->CR1 &= ~(1<<15);
 80003f6:	4b1f      	ldr	r3, [pc, #124]	@ (8000474 <USART1_Init+0xb8>)
 80003f8:	68db      	ldr	r3, [r3, #12]
 80003fa:	4a1e      	ldr	r2, [pc, #120]	@ (8000474 <USART1_Init+0xb8>)
 80003fc:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000400:	60d3      	str	r3, [r2, #12]

    uint32_t usartdiv = 0;
 8000402:	2300      	movs	r3, #0
 8000404:	60fb      	str	r3, [r7, #12]
    uint32_t mantissa = 0;
 8000406:	2300      	movs	r3, #0
 8000408:	60bb      	str	r3, [r7, #8]
    uint32_t fraction = 0;
 800040a:	2300      	movs	r3, #0
 800040c:	607b      	str	r3, [r7, #4]

    usartdiv= (25*16000000)/(4*9600);
 800040e:	f642 03b0 	movw	r3, #10416	@ 0x28b0
 8000412:	60fb      	str	r3, [r7, #12]
    mantissa= usartdiv/100;
 8000414:	68fb      	ldr	r3, [r7, #12]
 8000416:	4a18      	ldr	r2, [pc, #96]	@ (8000478 <USART1_Init+0xbc>)
 8000418:	fba2 2303 	umull	r2, r3, r2, r3
 800041c:	095b      	lsrs	r3, r3, #5
 800041e:	60bb      	str	r3, [r7, #8]
    fraction= (usartdiv-mantissa*100);
 8000420:	68bb      	ldr	r3, [r7, #8]
 8000422:	2264      	movs	r2, #100	@ 0x64
 8000424:	fb02 f303 	mul.w	r3, r2, r3
 8000428:	68fa      	ldr	r2, [r7, #12]
 800042a:	1ad3      	subs	r3, r2, r3
 800042c:	607b      	str	r3, [r7, #4]
    fraction= ((fraction*16 +50)/100) & 0x0F;
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	011b      	lsls	r3, r3, #4
 8000432:	3332      	adds	r3, #50	@ 0x32
 8000434:	4a10      	ldr	r2, [pc, #64]	@ (8000478 <USART1_Init+0xbc>)
 8000436:	fba2 2303 	umull	r2, r3, r2, r3
 800043a:	095b      	lsrs	r3, r3, #5
 800043c:	f003 030f 	and.w	r3, r3, #15
 8000440:	607b      	str	r3, [r7, #4]

    USART1->BRR |= (fraction);
 8000442:	4b0c      	ldr	r3, [pc, #48]	@ (8000474 <USART1_Init+0xb8>)
 8000444:	689a      	ldr	r2, [r3, #8]
 8000446:	490b      	ldr	r1, [pc, #44]	@ (8000474 <USART1_Init+0xb8>)
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	4313      	orrs	r3, r2
 800044c:	608b      	str	r3, [r1, #8]
    USART1->BRR |= (mantissa<<4);
 800044e:	4b09      	ldr	r3, [pc, #36]	@ (8000474 <USART1_Init+0xb8>)
 8000450:	689a      	ldr	r2, [r3, #8]
 8000452:	68bb      	ldr	r3, [r7, #8]
 8000454:	011b      	lsls	r3, r3, #4
 8000456:	4907      	ldr	r1, [pc, #28]	@ (8000474 <USART1_Init+0xb8>)
 8000458:	4313      	orrs	r3, r2
 800045a:	608b      	str	r3, [r1, #8]

    USART1->CR1 |= (1<<13);
 800045c:	4b05      	ldr	r3, [pc, #20]	@ (8000474 <USART1_Init+0xb8>)
 800045e:	68db      	ldr	r3, [r3, #12]
 8000460:	4a04      	ldr	r2, [pc, #16]	@ (8000474 <USART1_Init+0xb8>)
 8000462:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000466:	60d3      	str	r3, [r2, #12]
}
 8000468:	bf00      	nop
 800046a:	3710      	adds	r7, #16
 800046c:	46bd      	mov	sp, r7
 800046e:	bd80      	pop	{r7, pc}
 8000470:	40023800 	.word	0x40023800
 8000474:	40011000 	.word	0x40011000
 8000478:	51eb851f 	.word	0x51eb851f

0800047c <USART1_Transmit>:

void USART1_Transmit(uint8_t* data, uint32_t len){
 800047c:	b480      	push	{r7}
 800047e:	b085      	sub	sp, #20
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
 8000484:	6039      	str	r1, [r7, #0]
	uint32_t count= 0;
 8000486:	2300      	movs	r3, #0
 8000488:	60fb      	str	r3, [r7, #12]
	for(count= 0; count< len; count++){
 800048a:	2300      	movs	r3, #0
 800048c:	60fb      	str	r3, [r7, #12]
 800048e:	e010      	b.n	80004b2 <USART1_Transmit+0x36>
		while((USART1->SR&(1<<7))== 0);
 8000490:	bf00      	nop
 8000492:	4b11      	ldr	r3, [pc, #68]	@ (80004d8 <USART1_Transmit+0x5c>)
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800049a:	2b00      	cmp	r3, #0
 800049c:	d0f9      	beq.n	8000492 <USART1_Transmit+0x16>
		USART1->DR = (uint8_t)(*data & 0xFF);
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	781a      	ldrb	r2, [r3, #0]
 80004a2:	4b0d      	ldr	r3, [pc, #52]	@ (80004d8 <USART1_Transmit+0x5c>)
 80004a4:	605a      	str	r2, [r3, #4]
		data++;
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	3301      	adds	r3, #1
 80004aa:	607b      	str	r3, [r7, #4]
	for(count= 0; count< len; count++){
 80004ac:	68fb      	ldr	r3, [r7, #12]
 80004ae:	3301      	adds	r3, #1
 80004b0:	60fb      	str	r3, [r7, #12]
 80004b2:	68fa      	ldr	r2, [r7, #12]
 80004b4:	683b      	ldr	r3, [r7, #0]
 80004b6:	429a      	cmp	r2, r3
 80004b8:	d3ea      	bcc.n	8000490 <USART1_Transmit+0x14>
	}
	while((USART1->SR & (1<<6))==0);
 80004ba:	bf00      	nop
 80004bc:	4b06      	ldr	r3, [pc, #24]	@ (80004d8 <USART1_Transmit+0x5c>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d0f9      	beq.n	80004bc <USART1_Transmit+0x40>
}
 80004c8:	bf00      	nop
 80004ca:	bf00      	nop
 80004cc:	3714      	adds	r7, #20
 80004ce:	46bd      	mov	sp, r7
 80004d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop
 80004d8:	40011000 	.word	0x40011000

080004dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80004e0:	4b06      	ldr	r3, [pc, #24]	@ (80004fc <HAL_IncTick+0x20>)
 80004e2:	781b      	ldrb	r3, [r3, #0]
 80004e4:	461a      	mov	r2, r3
 80004e6:	4b06      	ldr	r3, [pc, #24]	@ (8000500 <HAL_IncTick+0x24>)
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	4413      	add	r3, r2
 80004ec:	4a04      	ldr	r2, [pc, #16]	@ (8000500 <HAL_IncTick+0x24>)
 80004ee:	6013      	str	r3, [r2, #0]
}
 80004f0:	bf00      	nop
 80004f2:	46bd      	mov	sp, r7
 80004f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop
 80004fc:	20000000 	.word	0x20000000
 8000500:	20000020 	.word	0x20000020

08000504 <__libc_init_array>:
 8000504:	b570      	push	{r4, r5, r6, lr}
 8000506:	4d0d      	ldr	r5, [pc, #52]	@ (800053c <__libc_init_array+0x38>)
 8000508:	4c0d      	ldr	r4, [pc, #52]	@ (8000540 <__libc_init_array+0x3c>)
 800050a:	1b64      	subs	r4, r4, r5
 800050c:	10a4      	asrs	r4, r4, #2
 800050e:	2600      	movs	r6, #0
 8000510:	42a6      	cmp	r6, r4
 8000512:	d109      	bne.n	8000528 <__libc_init_array+0x24>
 8000514:	4d0b      	ldr	r5, [pc, #44]	@ (8000544 <__libc_init_array+0x40>)
 8000516:	4c0c      	ldr	r4, [pc, #48]	@ (8000548 <__libc_init_array+0x44>)
 8000518:	f000 f818 	bl	800054c <_init>
 800051c:	1b64      	subs	r4, r4, r5
 800051e:	10a4      	asrs	r4, r4, #2
 8000520:	2600      	movs	r6, #0
 8000522:	42a6      	cmp	r6, r4
 8000524:	d105      	bne.n	8000532 <__libc_init_array+0x2e>
 8000526:	bd70      	pop	{r4, r5, r6, pc}
 8000528:	f855 3b04 	ldr.w	r3, [r5], #4
 800052c:	4798      	blx	r3
 800052e:	3601      	adds	r6, #1
 8000530:	e7ee      	b.n	8000510 <__libc_init_array+0xc>
 8000532:	f855 3b04 	ldr.w	r3, [r5], #4
 8000536:	4798      	blx	r3
 8000538:	3601      	adds	r6, #1
 800053a:	e7f2      	b.n	8000522 <__libc_init_array+0x1e>
 800053c:	08000578 	.word	0x08000578
 8000540:	08000578 	.word	0x08000578
 8000544:	08000578 	.word	0x08000578
 8000548:	0800057c 	.word	0x0800057c

0800054c <_init>:
 800054c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800054e:	bf00      	nop
 8000550:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000552:	bc08      	pop	{r3}
 8000554:	469e      	mov	lr, r3
 8000556:	4770      	bx	lr

08000558 <_fini>:
 8000558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800055a:	bf00      	nop
 800055c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800055e:	bc08      	pop	{r3}
 8000560:	469e      	mov	lr, r3
 8000562:	4770      	bx	lr
