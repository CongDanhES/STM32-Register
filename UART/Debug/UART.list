
UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000004cc  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000014  08000654  08000654  00001654  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000668  08000668  00002004  2**0
                  CONTENTS
  4 .ARM          00000000  08000668  08000668  00002004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000668  08000668  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000668  08000668  00001668  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800066c  0800066c  0000166c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  08000670  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00002004  2**0
                  CONTENTS
 10 .bss          00000028  20000004  20000004  00002004  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000002c  2000002c  00002004  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001746  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000065b  00000000  00000000  0000377a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000230  00000000  00000000  00003dd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000184  00000000  00000000  00004008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000020e2  00000000  00000000  0000418c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002aa6  00000000  00000000  0000626e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bee6e  00000000  00000000  00008d14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000c7b82  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000664  00000000  00000000  000c7bc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006d  00000000  00000000  000c822c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800063c 	.word	0x0800063c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	0800063c 	.word	0x0800063c

080001c8 <main>:
#include "UART.h"
#include "string.h"

uint8_t rx[8] = {0};

int main(){
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b086      	sub	sp, #24
 80001cc:	af00      	add	r7, sp, #0
    USART1_Init();
 80001ce:	f000 f931 	bl	8000434 <USART1_Init>
    USART2_Init();
 80001d2:	f000 f967 	bl	80004a4 <USART2_Init>

    const uint8_t data1[] = "ABCDE\r";
 80001d6:	4a10      	ldr	r2, [pc, #64]	@ (8000218 <main+0x50>)
 80001d8:	f107 0310 	add.w	r3, r7, #16
 80001dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80001e0:	6018      	str	r0, [r3, #0]
 80001e2:	3304      	adds	r3, #4
 80001e4:	8019      	strh	r1, [r3, #0]
 80001e6:	3302      	adds	r3, #2
 80001e8:	0c0a      	lsrs	r2, r1, #16
 80001ea:	701a      	strb	r2, [r3, #0]
    const uint8_t data2[] = "ABCDEFGHJK\r";
 80001ec:	4a0b      	ldr	r2, [pc, #44]	@ (800021c <main+0x54>)
 80001ee:	1d3b      	adds	r3, r7, #4
 80001f0:	ca07      	ldmia	r2, {r0, r1, r2}
 80001f2:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    USART2_Transmit(data1, strlen((char*)data1));
 80001f6:	f107 0310 	add.w	r3, r7, #16
 80001fa:	2106      	movs	r1, #6
 80001fc:	4618      	mov	r0, r3
 80001fe:	f000 f989 	bl	8000514 <USART2_Transmit>
    USART2_Transmit(data2, strlen((char*)data2));
 8000202:	1d3b      	adds	r3, r7, #4
 8000204:	210b      	movs	r1, #11
 8000206:	4618      	mov	r0, r3
 8000208:	f000 f984 	bl	8000514 <USART2_Transmit>

    while(1){
        USART2_Receive(rx, 8);
 800020c:	2108      	movs	r1, #8
 800020e:	4804      	ldr	r0, [pc, #16]	@ (8000220 <main+0x58>)
 8000210:	f000 f9b0 	bl	8000574 <USART2_Receive>
 8000214:	e7fa      	b.n	800020c <main+0x44>
 8000216:	bf00      	nop
 8000218:	08000654 	.word	0x08000654
 800021c:	0800065c 	.word	0x0800065c
 8000220:	20000020 	.word	0x20000020

08000224 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000224:	b480      	push	{r7}
 8000226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000228:	bf00      	nop
 800022a:	e7fd      	b.n	8000228 <NMI_Handler+0x4>

0800022c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800022c:	b480      	push	{r7}
 800022e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000230:	bf00      	nop
 8000232:	e7fd      	b.n	8000230 <HardFault_Handler+0x4>

08000234 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000234:	b480      	push	{r7}
 8000236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000238:	bf00      	nop
 800023a:	e7fd      	b.n	8000238 <MemManage_Handler+0x4>

0800023c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800023c:	b480      	push	{r7}
 800023e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000240:	bf00      	nop
 8000242:	e7fd      	b.n	8000240 <BusFault_Handler+0x4>

08000244 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000244:	b480      	push	{r7}
 8000246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000248:	bf00      	nop
 800024a:	e7fd      	b.n	8000248 <UsageFault_Handler+0x4>

0800024c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800024c:	b480      	push	{r7}
 800024e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000250:	bf00      	nop
 8000252:	46bd      	mov	sp, r7
 8000254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000258:	4770      	bx	lr

0800025a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800025a:	b480      	push	{r7}
 800025c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800025e:	bf00      	nop
 8000260:	46bd      	mov	sp, r7
 8000262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000266:	4770      	bx	lr

08000268 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000268:	b480      	push	{r7}
 800026a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800026c:	bf00      	nop
 800026e:	46bd      	mov	sp, r7
 8000270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000274:	4770      	bx	lr

08000276 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000276:	b580      	push	{r7, lr}
 8000278:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800027a:	f000 f9a7 	bl	80005cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800027e:	bf00      	nop
 8000280:	bd80      	pop	{r7, pc}
	...

08000284 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000284:	b480      	push	{r7}
 8000286:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000288:	4b06      	ldr	r3, [pc, #24]	@ (80002a4 <SystemInit+0x20>)
 800028a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800028e:	4a05      	ldr	r2, [pc, #20]	@ (80002a4 <SystemInit+0x20>)
 8000290:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000294:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000298:	bf00      	nop
 800029a:	46bd      	mov	sp, r7
 800029c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a0:	4770      	bx	lr
 80002a2:	bf00      	nop
 80002a4:	e000ed00 	.word	0xe000ed00

080002a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80002a8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80002e0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80002ac:	f7ff ffea 	bl	8000284 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80002b0:	480c      	ldr	r0, [pc, #48]	@ (80002e4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80002b2:	490d      	ldr	r1, [pc, #52]	@ (80002e8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80002b4:	4a0d      	ldr	r2, [pc, #52]	@ (80002ec <LoopFillZerobss+0x1a>)
  movs r3, #0
 80002b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002b8:	e002      	b.n	80002c0 <LoopCopyDataInit>

080002ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002be:	3304      	adds	r3, #4

080002c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002c4:	d3f9      	bcc.n	80002ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002c6:	4a0a      	ldr	r2, [pc, #40]	@ (80002f0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80002c8:	4c0a      	ldr	r4, [pc, #40]	@ (80002f4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80002ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002cc:	e001      	b.n	80002d2 <LoopFillZerobss>

080002ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002d0:	3204      	adds	r2, #4

080002d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002d4:	d3fb      	bcc.n	80002ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80002d6:	f000 f98d 	bl	80005f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80002da:	f7ff ff75 	bl	80001c8 <main>
  bx  lr    
 80002de:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80002e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80002e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002e8:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80002ec:	08000670 	.word	0x08000670
  ldr r2, =_sbss
 80002f0:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80002f4:	2000002c 	.word	0x2000002c

080002f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80002f8:	e7fe      	b.n	80002f8 <ADC_IRQHandler>
	...

080002fc <GPIO_UART1_SETUP>:
#include "GPIO.h"

void GPIO_UART1_SETUP(){
 80002fc:	b480      	push	{r7}
 80002fe:	af00      	add	r7, sp, #0
    GPIOA_CLOCK_ENABLE();
 8000300:	4b23      	ldr	r3, [pc, #140]	@ (8000390 <GPIO_UART1_SETUP+0x94>)
 8000302:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000304:	4a22      	ldr	r2, [pc, #136]	@ (8000390 <GPIO_UART1_SETUP+0x94>)
 8000306:	f043 0301 	orr.w	r3, r3, #1
 800030a:	6313      	str	r3, [r2, #48]	@ 0x30

    // PA9- TX
    GPIOA->MODER    |= (0x2<<18);
 800030c:	4b21      	ldr	r3, [pc, #132]	@ (8000394 <GPIO_UART1_SETUP+0x98>)
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	4a20      	ldr	r2, [pc, #128]	@ (8000394 <GPIO_UART1_SETUP+0x98>)
 8000312:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000316:	6013      	str	r3, [r2, #0]
    GPIOA->OTYPER   &= ~(1<<9);
 8000318:	4b1e      	ldr	r3, [pc, #120]	@ (8000394 <GPIO_UART1_SETUP+0x98>)
 800031a:	685b      	ldr	r3, [r3, #4]
 800031c:	4a1d      	ldr	r2, [pc, #116]	@ (8000394 <GPIO_UART1_SETUP+0x98>)
 800031e:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8000322:	6053      	str	r3, [r2, #4]
    GPIOA->OSPEEDR  |= (0x2<<18);
 8000324:	4b1b      	ldr	r3, [pc, #108]	@ (8000394 <GPIO_UART1_SETUP+0x98>)
 8000326:	689b      	ldr	r3, [r3, #8]
 8000328:	4a1a      	ldr	r2, [pc, #104]	@ (8000394 <GPIO_UART1_SETUP+0x98>)
 800032a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800032e:	6093      	str	r3, [r2, #8]
    GPIOA->PUPDR    |= (0x1<<18);
 8000330:	4b18      	ldr	r3, [pc, #96]	@ (8000394 <GPIO_UART1_SETUP+0x98>)
 8000332:	68db      	ldr	r3, [r3, #12]
 8000334:	4a17      	ldr	r2, [pc, #92]	@ (8000394 <GPIO_UART1_SETUP+0x98>)
 8000336:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800033a:	60d3      	str	r3, [r2, #12]

    // PA10- RX
    GPIOA->MODER    |= (0x2<<20);
 800033c:	4b15      	ldr	r3, [pc, #84]	@ (8000394 <GPIO_UART1_SETUP+0x98>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	4a14      	ldr	r2, [pc, #80]	@ (8000394 <GPIO_UART1_SETUP+0x98>)
 8000342:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000346:	6013      	str	r3, [r2, #0]
    GPIOA->OTYPER   &= ~(1<<10);
 8000348:	4b12      	ldr	r3, [pc, #72]	@ (8000394 <GPIO_UART1_SETUP+0x98>)
 800034a:	685b      	ldr	r3, [r3, #4]
 800034c:	4a11      	ldr	r2, [pc, #68]	@ (8000394 <GPIO_UART1_SETUP+0x98>)
 800034e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000352:	6053      	str	r3, [r2, #4]
    GPIOA->OSPEEDR  |= (0x2<<20);
 8000354:	4b0f      	ldr	r3, [pc, #60]	@ (8000394 <GPIO_UART1_SETUP+0x98>)
 8000356:	689b      	ldr	r3, [r3, #8]
 8000358:	4a0e      	ldr	r2, [pc, #56]	@ (8000394 <GPIO_UART1_SETUP+0x98>)
 800035a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800035e:	6093      	str	r3, [r2, #8]
    GPIOA->PUPDR    |= (0x1<<20);
 8000360:	4b0c      	ldr	r3, [pc, #48]	@ (8000394 <GPIO_UART1_SETUP+0x98>)
 8000362:	68db      	ldr	r3, [r3, #12]
 8000364:	4a0b      	ldr	r2, [pc, #44]	@ (8000394 <GPIO_UART1_SETUP+0x98>)
 8000366:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800036a:	60d3      	str	r3, [r2, #12]

    //
    GPIOA->AFRH     |= (0x7<<4);
 800036c:	4b09      	ldr	r3, [pc, #36]	@ (8000394 <GPIO_UART1_SETUP+0x98>)
 800036e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000370:	4a08      	ldr	r2, [pc, #32]	@ (8000394 <GPIO_UART1_SETUP+0x98>)
 8000372:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8000376:	6253      	str	r3, [r2, #36]	@ 0x24
    GPIOA->AFRH     |= (0x7<<8);
 8000378:	4b06      	ldr	r3, [pc, #24]	@ (8000394 <GPIO_UART1_SETUP+0x98>)
 800037a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800037c:	4a05      	ldr	r2, [pc, #20]	@ (8000394 <GPIO_UART1_SETUP+0x98>)
 800037e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8000382:	6253      	str	r3, [r2, #36]	@ 0x24
}
 8000384:	bf00      	nop
 8000386:	46bd      	mov	sp, r7
 8000388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop
 8000390:	40023800 	.word	0x40023800
 8000394:	40020000 	.word	0x40020000

08000398 <GPIO_UART2_SETUP>:

void GPIO_UART2_SETUP(){
 8000398:	b480      	push	{r7}
 800039a:	af00      	add	r7, sp, #0
	GPIOA_CLOCK_ENABLE();
 800039c:	4b23      	ldr	r3, [pc, #140]	@ (800042c <GPIO_UART2_SETUP+0x94>)
 800039e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003a0:	4a22      	ldr	r2, [pc, #136]	@ (800042c <GPIO_UART2_SETUP+0x94>)
 80003a2:	f043 0301 	orr.w	r3, r3, #1
 80003a6:	6313      	str	r3, [r2, #48]	@ 0x30
	// PA2-TX
	GPIOA->MODER 	|= (0x2<<4);
 80003a8:	4b21      	ldr	r3, [pc, #132]	@ (8000430 <GPIO_UART2_SETUP+0x98>)
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	4a20      	ldr	r2, [pc, #128]	@ (8000430 <GPIO_UART2_SETUP+0x98>)
 80003ae:	f043 0320 	orr.w	r3, r3, #32
 80003b2:	6013      	str	r3, [r2, #0]
	GPIOA->OTYPER	&= ~(1<<2);
 80003b4:	4b1e      	ldr	r3, [pc, #120]	@ (8000430 <GPIO_UART2_SETUP+0x98>)
 80003b6:	685b      	ldr	r3, [r3, #4]
 80003b8:	4a1d      	ldr	r2, [pc, #116]	@ (8000430 <GPIO_UART2_SETUP+0x98>)
 80003ba:	f023 0304 	bic.w	r3, r3, #4
 80003be:	6053      	str	r3, [r2, #4]
	GPIOA->OSPEEDR	|= (0x2<<4);
 80003c0:	4b1b      	ldr	r3, [pc, #108]	@ (8000430 <GPIO_UART2_SETUP+0x98>)
 80003c2:	689b      	ldr	r3, [r3, #8]
 80003c4:	4a1a      	ldr	r2, [pc, #104]	@ (8000430 <GPIO_UART2_SETUP+0x98>)
 80003c6:	f043 0320 	orr.w	r3, r3, #32
 80003ca:	6093      	str	r3, [r2, #8]
	GPIOA->PUPDR	|= (0x1<<4);
 80003cc:	4b18      	ldr	r3, [pc, #96]	@ (8000430 <GPIO_UART2_SETUP+0x98>)
 80003ce:	68db      	ldr	r3, [r3, #12]
 80003d0:	4a17      	ldr	r2, [pc, #92]	@ (8000430 <GPIO_UART2_SETUP+0x98>)
 80003d2:	f043 0310 	orr.w	r3, r3, #16
 80003d6:	60d3      	str	r3, [r2, #12]

	// PA3- RX
	GPIOA->MODER 	|= (0x2<<6);
 80003d8:	4b15      	ldr	r3, [pc, #84]	@ (8000430 <GPIO_UART2_SETUP+0x98>)
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	4a14      	ldr	r2, [pc, #80]	@ (8000430 <GPIO_UART2_SETUP+0x98>)
 80003de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80003e2:	6013      	str	r3, [r2, #0]
	GPIOA->OTYPER	&= ~(1<<3);
 80003e4:	4b12      	ldr	r3, [pc, #72]	@ (8000430 <GPIO_UART2_SETUP+0x98>)
 80003e6:	685b      	ldr	r3, [r3, #4]
 80003e8:	4a11      	ldr	r2, [pc, #68]	@ (8000430 <GPIO_UART2_SETUP+0x98>)
 80003ea:	f023 0308 	bic.w	r3, r3, #8
 80003ee:	6053      	str	r3, [r2, #4]
	GPIOA->OSPEEDR	|= (0x2<<6);
 80003f0:	4b0f      	ldr	r3, [pc, #60]	@ (8000430 <GPIO_UART2_SETUP+0x98>)
 80003f2:	689b      	ldr	r3, [r3, #8]
 80003f4:	4a0e      	ldr	r2, [pc, #56]	@ (8000430 <GPIO_UART2_SETUP+0x98>)
 80003f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80003fa:	6093      	str	r3, [r2, #8]
	GPIOA->PUPDR	|= (0x1<<6);
 80003fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000430 <GPIO_UART2_SETUP+0x98>)
 80003fe:	68db      	ldr	r3, [r3, #12]
 8000400:	4a0b      	ldr	r2, [pc, #44]	@ (8000430 <GPIO_UART2_SETUP+0x98>)
 8000402:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000406:	60d3      	str	r3, [r2, #12]

	//
	GPIOA->AFRL		|= (0x7<<8);
 8000408:	4b09      	ldr	r3, [pc, #36]	@ (8000430 <GPIO_UART2_SETUP+0x98>)
 800040a:	6a1b      	ldr	r3, [r3, #32]
 800040c:	4a08      	ldr	r2, [pc, #32]	@ (8000430 <GPIO_UART2_SETUP+0x98>)
 800040e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8000412:	6213      	str	r3, [r2, #32]
	GPIOA->AFRL		|= (0X7<<2);
 8000414:	4b06      	ldr	r3, [pc, #24]	@ (8000430 <GPIO_UART2_SETUP+0x98>)
 8000416:	6a1b      	ldr	r3, [r3, #32]
 8000418:	4a05      	ldr	r2, [pc, #20]	@ (8000430 <GPIO_UART2_SETUP+0x98>)
 800041a:	f043 031c 	orr.w	r3, r3, #28
 800041e:	6213      	str	r3, [r2, #32]
}
 8000420:	bf00      	nop
 8000422:	46bd      	mov	sp, r7
 8000424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000428:	4770      	bx	lr
 800042a:	bf00      	nop
 800042c:	40023800 	.word	0x40023800
 8000430:	40020000 	.word	0x40020000

08000434 <USART1_Init>:
 *      Author: ASUS
 */

#include "UART.h"

void USART1_Init(){
 8000434:	b580      	push	{r7, lr}
 8000436:	af00      	add	r7, sp, #0
    USART1_CLOCK_ENABLE();
 8000438:	4b18      	ldr	r3, [pc, #96]	@ (800049c <USART1_Init+0x68>)
 800043a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800043c:	4a17      	ldr	r2, [pc, #92]	@ (800049c <USART1_Init+0x68>)
 800043e:	f043 0310 	orr.w	r3, r3, #16
 8000442:	6453      	str	r3, [r2, #68]	@ 0x44
    GPIO_UART1_SETUP();
 8000444:	f7ff ff5a 	bl	80002fc <GPIO_UART1_SETUP>

    USART1->CR1 &= ~(1<<12);
 8000448:	4b15      	ldr	r3, [pc, #84]	@ (80004a0 <USART1_Init+0x6c>)
 800044a:	68db      	ldr	r3, [r3, #12]
 800044c:	4a14      	ldr	r2, [pc, #80]	@ (80004a0 <USART1_Init+0x6c>)
 800044e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000452:	60d3      	str	r3, [r2, #12]
    USART1->CR1 &= ~(1<<10);
 8000454:	4b12      	ldr	r3, [pc, #72]	@ (80004a0 <USART1_Init+0x6c>)
 8000456:	68db      	ldr	r3, [r3, #12]
 8000458:	4a11      	ldr	r2, [pc, #68]	@ (80004a0 <USART1_Init+0x6c>)
 800045a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800045e:	60d3      	str	r3, [r2, #12]
    USART1->CR1 |= (1<<3);
 8000460:	4b0f      	ldr	r3, [pc, #60]	@ (80004a0 <USART1_Init+0x6c>)
 8000462:	68db      	ldr	r3, [r3, #12]
 8000464:	4a0e      	ldr	r2, [pc, #56]	@ (80004a0 <USART1_Init+0x6c>)
 8000466:	f043 0308 	orr.w	r3, r3, #8
 800046a:	60d3      	str	r3, [r2, #12]
    USART1->CR1 |= (1<<2);
 800046c:	4b0c      	ldr	r3, [pc, #48]	@ (80004a0 <USART1_Init+0x6c>)
 800046e:	68db      	ldr	r3, [r3, #12]
 8000470:	4a0b      	ldr	r2, [pc, #44]	@ (80004a0 <USART1_Init+0x6c>)
 8000472:	f043 0304 	orr.w	r3, r3, #4
 8000476:	60d3      	str	r3, [r2, #12]
    USART1->CR1 &= ~(1<<15);
 8000478:	4b09      	ldr	r3, [pc, #36]	@ (80004a0 <USART1_Init+0x6c>)
 800047a:	68db      	ldr	r3, [r3, #12]
 800047c:	4a08      	ldr	r2, [pc, #32]	@ (80004a0 <USART1_Init+0x6c>)
 800047e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000482:	60d3      	str	r3, [r2, #12]

    USART1->BRR = (104 << 4) | 3;
 8000484:	4b06      	ldr	r3, [pc, #24]	@ (80004a0 <USART1_Init+0x6c>)
 8000486:	f240 6283 	movw	r2, #1667	@ 0x683
 800048a:	609a      	str	r2, [r3, #8]

    USART1->CR1 |= (1<<13);   // UE: USART enable
 800048c:	4b04      	ldr	r3, [pc, #16]	@ (80004a0 <USART1_Init+0x6c>)
 800048e:	68db      	ldr	r3, [r3, #12]
 8000490:	4a03      	ldr	r2, [pc, #12]	@ (80004a0 <USART1_Init+0x6c>)
 8000492:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000496:	60d3      	str	r3, [r2, #12]
}
 8000498:	bf00      	nop
 800049a:	bd80      	pop	{r7, pc}
 800049c:	40023800 	.word	0x40023800
 80004a0:	40011000 	.word	0x40011000

080004a4 <USART2_Init>:
		*data =  (uint8_t)(USART1->DR &0xFF);
		data++;
	}
}

void USART2_Init(){
 80004a4:	b580      	push	{r7, lr}
 80004a6:	af00      	add	r7, sp, #0
    USART2_CLOCK_ENABLE();
 80004a8:	4b18      	ldr	r3, [pc, #96]	@ (800050c <USART2_Init+0x68>)
 80004aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80004ac:	4a17      	ldr	r2, [pc, #92]	@ (800050c <USART2_Init+0x68>)
 80004ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80004b2:	6413      	str	r3, [r2, #64]	@ 0x40
    GPIO_UART2_SETUP();
 80004b4:	f7ff ff70 	bl	8000398 <GPIO_UART2_SETUP>

    USART2->CR1 &= ~(1<<12);
 80004b8:	4b15      	ldr	r3, [pc, #84]	@ (8000510 <USART2_Init+0x6c>)
 80004ba:	68db      	ldr	r3, [r3, #12]
 80004bc:	4a14      	ldr	r2, [pc, #80]	@ (8000510 <USART2_Init+0x6c>)
 80004be:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80004c2:	60d3      	str	r3, [r2, #12]
    USART2->CR1 &= ~(1<<10);
 80004c4:	4b12      	ldr	r3, [pc, #72]	@ (8000510 <USART2_Init+0x6c>)
 80004c6:	68db      	ldr	r3, [r3, #12]
 80004c8:	4a11      	ldr	r2, [pc, #68]	@ (8000510 <USART2_Init+0x6c>)
 80004ca:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80004ce:	60d3      	str	r3, [r2, #12]
    USART2->CR1 |= (1<<3);
 80004d0:	4b0f      	ldr	r3, [pc, #60]	@ (8000510 <USART2_Init+0x6c>)
 80004d2:	68db      	ldr	r3, [r3, #12]
 80004d4:	4a0e      	ldr	r2, [pc, #56]	@ (8000510 <USART2_Init+0x6c>)
 80004d6:	f043 0308 	orr.w	r3, r3, #8
 80004da:	60d3      	str	r3, [r2, #12]
    USART2->CR1 |= (1<<2);
 80004dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000510 <USART2_Init+0x6c>)
 80004de:	68db      	ldr	r3, [r3, #12]
 80004e0:	4a0b      	ldr	r2, [pc, #44]	@ (8000510 <USART2_Init+0x6c>)
 80004e2:	f043 0304 	orr.w	r3, r3, #4
 80004e6:	60d3      	str	r3, [r2, #12]
    USART2->CR1 &= ~(1<<15);
 80004e8:	4b09      	ldr	r3, [pc, #36]	@ (8000510 <USART2_Init+0x6c>)
 80004ea:	68db      	ldr	r3, [r3, #12]
 80004ec:	4a08      	ldr	r2, [pc, #32]	@ (8000510 <USART2_Init+0x6c>)
 80004ee:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80004f2:	60d3      	str	r3, [r2, #12]

    USART2->BRR = (8 << 4) | 11;
 80004f4:	4b06      	ldr	r3, [pc, #24]	@ (8000510 <USART2_Init+0x6c>)
 80004f6:	228b      	movs	r2, #139	@ 0x8b
 80004f8:	609a      	str	r2, [r3, #8]

    USART2->CR1 |= (1<<13);   // UE: USART enable
 80004fa:	4b05      	ldr	r3, [pc, #20]	@ (8000510 <USART2_Init+0x6c>)
 80004fc:	68db      	ldr	r3, [r3, #12]
 80004fe:	4a04      	ldr	r2, [pc, #16]	@ (8000510 <USART2_Init+0x6c>)
 8000500:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000504:	60d3      	str	r3, [r2, #12]
}
 8000506:	bf00      	nop
 8000508:	bd80      	pop	{r7, pc}
 800050a:	bf00      	nop
 800050c:	40023800 	.word	0x40023800
 8000510:	40004400 	.word	0x40004400

08000514 <USART2_Transmit>:

void USART2_Transmit(uint8_t* data, uint32_t len){
 8000514:	b480      	push	{r7}
 8000516:	b085      	sub	sp, #20
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
 800051c:	6039      	str	r1, [r7, #0]
	uint32_t count= 0;
 800051e:	2300      	movs	r3, #0
 8000520:	60fb      	str	r3, [r7, #12]
	for(count= 0; count< len; count++){
 8000522:	2300      	movs	r3, #0
 8000524:	60fb      	str	r3, [r7, #12]
 8000526:	e010      	b.n	800054a <USART2_Transmit+0x36>
		while((USART2->SR&(1<<7))== 0);
 8000528:	bf00      	nop
 800052a:	4b11      	ldr	r3, [pc, #68]	@ (8000570 <USART2_Transmit+0x5c>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000532:	2b00      	cmp	r3, #0
 8000534:	d0f9      	beq.n	800052a <USART2_Transmit+0x16>
		USART2->DR = (uint8_t)(*data & 0xFF);
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	781a      	ldrb	r2, [r3, #0]
 800053a:	4b0d      	ldr	r3, [pc, #52]	@ (8000570 <USART2_Transmit+0x5c>)
 800053c:	605a      	str	r2, [r3, #4]
		data++;
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	3301      	adds	r3, #1
 8000542:	607b      	str	r3, [r7, #4]
	for(count= 0; count< len; count++){
 8000544:	68fb      	ldr	r3, [r7, #12]
 8000546:	3301      	adds	r3, #1
 8000548:	60fb      	str	r3, [r7, #12]
 800054a:	68fa      	ldr	r2, [r7, #12]
 800054c:	683b      	ldr	r3, [r7, #0]
 800054e:	429a      	cmp	r2, r3
 8000550:	d3ea      	bcc.n	8000528 <USART2_Transmit+0x14>
	}
	while((USART2->SR & (1<<6))==0);
 8000552:	bf00      	nop
 8000554:	4b06      	ldr	r3, [pc, #24]	@ (8000570 <USART2_Transmit+0x5c>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800055c:	2b00      	cmp	r3, #0
 800055e:	d0f9      	beq.n	8000554 <USART2_Transmit+0x40>
}
 8000560:	bf00      	nop
 8000562:	bf00      	nop
 8000564:	3714      	adds	r7, #20
 8000566:	46bd      	mov	sp, r7
 8000568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop
 8000570:	40004400 	.word	0x40004400

08000574 <USART2_Receive>:

void USART2_Receive(uint8_t* data, uint32_t len){
 8000574:	b480      	push	{r7}
 8000576:	b085      	sub	sp, #20
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
 800057c:	6039      	str	r1, [r7, #0]
	uint32_t count= 0;
 800057e:	2300      	movs	r3, #0
 8000580:	60fb      	str	r3, [r7, #12]
	for(count= 0; count< len; count++){
 8000582:	2300      	movs	r3, #0
 8000584:	60fb      	str	r3, [r7, #12]
 8000586:	e011      	b.n	80005ac <USART2_Receive+0x38>
		while((USART2->SR & (1<<5))==0);
 8000588:	bf00      	nop
 800058a:	4b0e      	ldr	r3, [pc, #56]	@ (80005c4 <USART2_Receive+0x50>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	f003 0320 	and.w	r3, r3, #32
 8000592:	2b00      	cmp	r3, #0
 8000594:	d0f9      	beq.n	800058a <USART2_Receive+0x16>
		*data =  (uint8_t)(USART1->DR &0xFF);
 8000596:	4b0c      	ldr	r3, [pc, #48]	@ (80005c8 <USART2_Receive+0x54>)
 8000598:	685b      	ldr	r3, [r3, #4]
 800059a:	b2da      	uxtb	r2, r3
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	701a      	strb	r2, [r3, #0]
		data++;
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	3301      	adds	r3, #1
 80005a4:	607b      	str	r3, [r7, #4]
	for(count= 0; count< len; count++){
 80005a6:	68fb      	ldr	r3, [r7, #12]
 80005a8:	3301      	adds	r3, #1
 80005aa:	60fb      	str	r3, [r7, #12]
 80005ac:	68fa      	ldr	r2, [r7, #12]
 80005ae:	683b      	ldr	r3, [r7, #0]
 80005b0:	429a      	cmp	r2, r3
 80005b2:	d3e9      	bcc.n	8000588 <USART2_Receive+0x14>
	}
}
 80005b4:	bf00      	nop
 80005b6:	bf00      	nop
 80005b8:	3714      	adds	r7, #20
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop
 80005c4:	40004400 	.word	0x40004400
 80005c8:	40011000 	.word	0x40011000

080005cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005cc:	b480      	push	{r7}
 80005ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005d0:	4b06      	ldr	r3, [pc, #24]	@ (80005ec <HAL_IncTick+0x20>)
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	461a      	mov	r2, r3
 80005d6:	4b06      	ldr	r3, [pc, #24]	@ (80005f0 <HAL_IncTick+0x24>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	4413      	add	r3, r2
 80005dc:	4a04      	ldr	r2, [pc, #16]	@ (80005f0 <HAL_IncTick+0x24>)
 80005de:	6013      	str	r3, [r2, #0]
}
 80005e0:	bf00      	nop
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop
 80005ec:	20000000 	.word	0x20000000
 80005f0:	20000028 	.word	0x20000028

080005f4 <__libc_init_array>:
 80005f4:	b570      	push	{r4, r5, r6, lr}
 80005f6:	4d0d      	ldr	r5, [pc, #52]	@ (800062c <__libc_init_array+0x38>)
 80005f8:	4c0d      	ldr	r4, [pc, #52]	@ (8000630 <__libc_init_array+0x3c>)
 80005fa:	1b64      	subs	r4, r4, r5
 80005fc:	10a4      	asrs	r4, r4, #2
 80005fe:	2600      	movs	r6, #0
 8000600:	42a6      	cmp	r6, r4
 8000602:	d109      	bne.n	8000618 <__libc_init_array+0x24>
 8000604:	4d0b      	ldr	r5, [pc, #44]	@ (8000634 <__libc_init_array+0x40>)
 8000606:	4c0c      	ldr	r4, [pc, #48]	@ (8000638 <__libc_init_array+0x44>)
 8000608:	f000 f818 	bl	800063c <_init>
 800060c:	1b64      	subs	r4, r4, r5
 800060e:	10a4      	asrs	r4, r4, #2
 8000610:	2600      	movs	r6, #0
 8000612:	42a6      	cmp	r6, r4
 8000614:	d105      	bne.n	8000622 <__libc_init_array+0x2e>
 8000616:	bd70      	pop	{r4, r5, r6, pc}
 8000618:	f855 3b04 	ldr.w	r3, [r5], #4
 800061c:	4798      	blx	r3
 800061e:	3601      	adds	r6, #1
 8000620:	e7ee      	b.n	8000600 <__libc_init_array+0xc>
 8000622:	f855 3b04 	ldr.w	r3, [r5], #4
 8000626:	4798      	blx	r3
 8000628:	3601      	adds	r6, #1
 800062a:	e7f2      	b.n	8000612 <__libc_init_array+0x1e>
 800062c:	08000668 	.word	0x08000668
 8000630:	08000668 	.word	0x08000668
 8000634:	08000668 	.word	0x08000668
 8000638:	0800066c 	.word	0x0800066c

0800063c <_init>:
 800063c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800063e:	bf00      	nop
 8000640:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000642:	bc08      	pop	{r3}
 8000644:	469e      	mov	lr, r3
 8000646:	4770      	bx	lr

08000648 <_fini>:
 8000648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800064a:	bf00      	nop
 800064c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800064e:	bc08      	pop	{r3}
 8000650:	469e      	mov	lr, r3
 8000652:	4770      	bx	lr
