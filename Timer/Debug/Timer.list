
Timer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000318  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080004b0  080004b0  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080004b0  080004b0  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080004b0  080004b0  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080004b0  080004b0  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080004b0  080004b0  000104b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080004b4  080004b4  000104b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080004b8  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000004  080004bc  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000028  080004bc  00020028  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001725  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000005ef  00000000  00000000  00021759  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000210  00000000  00000000  00021d48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000001a8  00000000  00000000  00021f58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000162d  00000000  00000000  00022100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002389  00000000  00000000  0002372d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007e7cd  00000000  00000000  00025ab6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000a4283  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000005c4  00000000  00000000  000a42d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000004 	.word	0x20000004
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000498 	.word	0x08000498

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000008 	.word	0x20000008
 80001d4:	08000498 	.word	0x08000498

080001d8 <main>:
#include "Timer.h"
uint32_t captured_value;
int main(void){
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0
	TIM1_PWM();
 80001dc:	f000 f898 	bl	8000310 <TIM1_PWM>
	TIM2_INPUTCAPTURE();
 80001e0:	f000 f8e2 	bl	80003a8 <TIM2_INPUTCAPTURE>

	while (1) {
		captured_value = TIM2->CCR2;
 80001e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80001e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80001ea:	4a01      	ldr	r2, [pc, #4]	; (80001f0 <main+0x18>)
 80001ec:	6013      	str	r3, [r2, #0]
 80001ee:	e7f9      	b.n	80001e4 <main+0xc>
 80001f0:	20000020 	.word	0x20000020

080001f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80001f4:	b480      	push	{r7}
 80001f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80001f8:	e7fe      	b.n	80001f8 <NMI_Handler+0x4>

080001fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80001fa:	b480      	push	{r7}
 80001fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80001fe:	e7fe      	b.n	80001fe <HardFault_Handler+0x4>

08000200 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000200:	b480      	push	{r7}
 8000202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000204:	e7fe      	b.n	8000204 <MemManage_Handler+0x4>

08000206 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000206:	b480      	push	{r7}
 8000208:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800020a:	e7fe      	b.n	800020a <BusFault_Handler+0x4>

0800020c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800020c:	b480      	push	{r7}
 800020e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000210:	e7fe      	b.n	8000210 <UsageFault_Handler+0x4>

08000212 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000212:	b480      	push	{r7}
 8000214:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000216:	bf00      	nop
 8000218:	46bd      	mov	sp, r7
 800021a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800021e:	4770      	bx	lr

08000220 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000220:	b480      	push	{r7}
 8000222:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000224:	bf00      	nop
 8000226:	46bd      	mov	sp, r7
 8000228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800022c:	4770      	bx	lr

0800022e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800022e:	b480      	push	{r7}
 8000230:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000232:	bf00      	nop
 8000234:	46bd      	mov	sp, r7
 8000236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800023a:	4770      	bx	lr

0800023c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000240:	f000 f8f2 	bl	8000428 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000244:	bf00      	nop
 8000246:	bd80      	pop	{r7, pc}

08000248 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000248:	b480      	push	{r7}
 800024a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800024c:	4b06      	ldr	r3, [pc, #24]	; (8000268 <SystemInit+0x20>)
 800024e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000252:	4a05      	ldr	r2, [pc, #20]	; (8000268 <SystemInit+0x20>)
 8000254:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000258:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800025c:	bf00      	nop
 800025e:	46bd      	mov	sp, r7
 8000260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000264:	4770      	bx	lr
 8000266:	bf00      	nop
 8000268:	e000ed00 	.word	0xe000ed00

0800026c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800026c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80002a4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000270:	480d      	ldr	r0, [pc, #52]	; (80002a8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000272:	490e      	ldr	r1, [pc, #56]	; (80002ac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000274:	4a0e      	ldr	r2, [pc, #56]	; (80002b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000276:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000278:	e002      	b.n	8000280 <LoopCopyDataInit>

0800027a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800027a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800027c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800027e:	3304      	adds	r3, #4

08000280 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000280:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000282:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000284:	d3f9      	bcc.n	800027a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000286:	4a0b      	ldr	r2, [pc, #44]	; (80002b4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000288:	4c0b      	ldr	r4, [pc, #44]	; (80002b8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800028a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800028c:	e001      	b.n	8000292 <LoopFillZerobss>

0800028e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800028e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000290:	3204      	adds	r2, #4

08000292 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000292:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000294:	d3fb      	bcc.n	800028e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000296:	f7ff ffd7 	bl	8000248 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800029a:	f000 f8d9 	bl	8000450 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800029e:	f7ff ff9b 	bl	80001d8 <main>
  bx  lr    
 80002a2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80002a4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80002a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002ac:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80002b0:	080004b8 	.word	0x080004b8
  ldr r2, =_sbss
 80002b4:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80002b8:	20000028 	.word	0x20000028

080002bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80002bc:	e7fe      	b.n	80002bc <ADC_IRQHandler>
	...

080002c0 <TIM2_GPIO_SETUP>:
	GPIOA->OSPEEDR	|= (0x2<<16);
	GPIOA->PUPDR	&= (0x3<<16);
	GPIOA->AFRH		|= (0x1);
}

void TIM2_GPIO_SETUP(){
 80002c0:	b480      	push	{r7}
 80002c2:	af00      	add	r7, sp, #0
	//PA1
	GPIOA->MODER  	|= (0x2<<2);
 80002c4:	4b11      	ldr	r3, [pc, #68]	; (800030c <TIM2_GPIO_SETUP+0x4c>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	4a10      	ldr	r2, [pc, #64]	; (800030c <TIM2_GPIO_SETUP+0x4c>)
 80002ca:	f043 0308 	orr.w	r3, r3, #8
 80002ce:	6013      	str	r3, [r2, #0]
	GPIOA->OTYPER 	&= ~(0x1<<1);
 80002d0:	4b0e      	ldr	r3, [pc, #56]	; (800030c <TIM2_GPIO_SETUP+0x4c>)
 80002d2:	685b      	ldr	r3, [r3, #4]
 80002d4:	4a0d      	ldr	r2, [pc, #52]	; (800030c <TIM2_GPIO_SETUP+0x4c>)
 80002d6:	f023 0302 	bic.w	r3, r3, #2
 80002da:	6053      	str	r3, [r2, #4]
	GPIOA->OSPEEDR	|= (0x2<<2);
 80002dc:	4b0b      	ldr	r3, [pc, #44]	; (800030c <TIM2_GPIO_SETUP+0x4c>)
 80002de:	689b      	ldr	r3, [r3, #8]
 80002e0:	4a0a      	ldr	r2, [pc, #40]	; (800030c <TIM2_GPIO_SETUP+0x4c>)
 80002e2:	f043 0308 	orr.w	r3, r3, #8
 80002e6:	6093      	str	r3, [r2, #8]
	GPIOA->PUPDR	&= (0x3<<2);
 80002e8:	4b08      	ldr	r3, [pc, #32]	; (800030c <TIM2_GPIO_SETUP+0x4c>)
 80002ea:	68db      	ldr	r3, [r3, #12]
 80002ec:	4a07      	ldr	r2, [pc, #28]	; (800030c <TIM2_GPIO_SETUP+0x4c>)
 80002ee:	f003 030c 	and.w	r3, r3, #12
 80002f2:	60d3      	str	r3, [r2, #12]
	GPIOA->AFRL		|= (0x1<<4);
 80002f4:	4b05      	ldr	r3, [pc, #20]	; (800030c <TIM2_GPIO_SETUP+0x4c>)
 80002f6:	6a1b      	ldr	r3, [r3, #32]
 80002f8:	4a04      	ldr	r2, [pc, #16]	; (800030c <TIM2_GPIO_SETUP+0x4c>)
 80002fa:	f043 0310 	orr.w	r3, r3, #16
 80002fe:	6213      	str	r3, [r2, #32]
}
 8000300:	bf00      	nop
 8000302:	46bd      	mov	sp, r7
 8000304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000308:	4770      	bx	lr
 800030a:	bf00      	nop
 800030c:	40020000 	.word	0x40020000

08000310 <TIM1_PWM>:
 *      Author: NCPC
 */

#include "Timer.h"

void TIM1_PWM(){
 8000310:	b480      	push	{r7}
 8000312:	af00      	add	r7, sp, #0
	TIM1_ENABLE();
 8000314:	4b22      	ldr	r3, [pc, #136]	; (80003a0 <TIM1_PWM+0x90>)
 8000316:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000318:	4a21      	ldr	r2, [pc, #132]	; (80003a0 <TIM1_PWM+0x90>)
 800031a:	f043 0301 	orr.w	r3, r3, #1
 800031e:	6453      	str	r3, [r2, #68]	; 0x44
	GPIOA_ENABLE();
 8000320:	4b1f      	ldr	r3, [pc, #124]	; (80003a0 <TIM1_PWM+0x90>)
 8000322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000324:	4a1e      	ldr	r2, [pc, #120]	; (80003a0 <TIM1_PWM+0x90>)
 8000326:	f043 0301 	orr.w	r3, r3, #1
 800032a:	6313      	str	r3, [r2, #48]	; 0x30

    // Timer base configuration
    TIM1->PSC = 84 - 1;        // Prescaler (1 MHz timer clock with 84 MHz APB2)
 800032c:	4b1d      	ldr	r3, [pc, #116]	; (80003a4 <TIM1_PWM+0x94>)
 800032e:	2253      	movs	r2, #83	; 0x53
 8000330:	629a      	str	r2, [r3, #40]	; 0x28
    TIM1->ARR = 20000 - 1;     // Auto-reload for 50 Hz (20ms)
 8000332:	4b1c      	ldr	r3, [pc, #112]	; (80003a4 <TIM1_PWM+0x94>)
 8000334:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000338:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM1->CCR1 = 1500;         // Duty cycle (e.g., 1.5ms for servo middle)
 800033a:	4b1a      	ldr	r3, [pc, #104]	; (80003a4 <TIM1_PWM+0x94>)
 800033c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000340:	635a      	str	r2, [r3, #52]	; 0x34

    // PWM mode 1 on Channel 1, enable preload
    TIM1->CCMR1 |= (6 << 4);   // OC1M = 110 (PWM mode 1)
 8000342:	4b18      	ldr	r3, [pc, #96]	; (80003a4 <TIM1_PWM+0x94>)
 8000344:	699b      	ldr	r3, [r3, #24]
 8000346:	4a17      	ldr	r2, [pc, #92]	; (80003a4 <TIM1_PWM+0x94>)
 8000348:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800034c:	6193      	str	r3, [r2, #24]
    TIM1->CCMR1 |= (1 << 3);   // OC1PE
 800034e:	4b15      	ldr	r3, [pc, #84]	; (80003a4 <TIM1_PWM+0x94>)
 8000350:	699b      	ldr	r3, [r3, #24]
 8000352:	4a14      	ldr	r2, [pc, #80]	; (80003a4 <TIM1_PWM+0x94>)
 8000354:	f043 0308 	orr.w	r3, r3, #8
 8000358:	6193      	str	r3, [r2, #24]

    // Enable output for Channel 1
    TIM1->CCER |= (1 << 0);    // CC1E
 800035a:	4b12      	ldr	r3, [pc, #72]	; (80003a4 <TIM1_PWM+0x94>)
 800035c:	6a1b      	ldr	r3, [r3, #32]
 800035e:	4a11      	ldr	r2, [pc, #68]	; (80003a4 <TIM1_PWM+0x94>)
 8000360:	f043 0301 	orr.w	r3, r3, #1
 8000364:	6213      	str	r3, [r2, #32]

    // Main output enable (MOE) in BDTR register (required for TIM1)
    TIM1->BDTR |= (1 << 15);   // MOE
 8000366:	4b0f      	ldr	r3, [pc, #60]	; (80003a4 <TIM1_PWM+0x94>)
 8000368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800036a:	4a0e      	ldr	r2, [pc, #56]	; (80003a4 <TIM1_PWM+0x94>)
 800036c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000370:	6453      	str	r3, [r2, #68]	; 0x44

    // Enable auto-reload preload
    TIM1->CR1 |= (1 << 7);     // ARPE
 8000372:	4b0c      	ldr	r3, [pc, #48]	; (80003a4 <TIM1_PWM+0x94>)
 8000374:	681b      	ldr	r3, [r3, #0]
 8000376:	4a0b      	ldr	r2, [pc, #44]	; (80003a4 <TIM1_PWM+0x94>)
 8000378:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800037c:	6013      	str	r3, [r2, #0]

    // Generate update event to load registers
    TIM1->EGR |= (1 << 0);     // UG
 800037e:	4b09      	ldr	r3, [pc, #36]	; (80003a4 <TIM1_PWM+0x94>)
 8000380:	695b      	ldr	r3, [r3, #20]
 8000382:	4a08      	ldr	r2, [pc, #32]	; (80003a4 <TIM1_PWM+0x94>)
 8000384:	f043 0301 	orr.w	r3, r3, #1
 8000388:	6153      	str	r3, [r2, #20]

    // Start timer
    TIM1->CR1 |= (1 << 0);     // CEN
 800038a:	4b06      	ldr	r3, [pc, #24]	; (80003a4 <TIM1_PWM+0x94>)
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	4a05      	ldr	r2, [pc, #20]	; (80003a4 <TIM1_PWM+0x94>)
 8000390:	f043 0301 	orr.w	r3, r3, #1
 8000394:	6013      	str	r3, [r2, #0]
}
 8000396:	bf00      	nop
 8000398:	46bd      	mov	sp, r7
 800039a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039e:	4770      	bx	lr
 80003a0:	40023800 	.word	0x40023800
 80003a4:	40010000 	.word	0x40010000

080003a8 <TIM2_INPUTCAPTURE>:

void TIM2_INPUTCAPTURE() {
 80003a8:	b580      	push	{r7, lr}
 80003aa:	af00      	add	r7, sp, #0
    // Enable TIM2 & GPIOA clock
	TIM2_ENABLE();
 80003ac:	4b1d      	ldr	r3, [pc, #116]	; (8000424 <TIM2_INPUTCAPTURE+0x7c>)
 80003ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80003b0:	4a1c      	ldr	r2, [pc, #112]	; (8000424 <TIM2_INPUTCAPTURE+0x7c>)
 80003b2:	f043 0301 	orr.w	r3, r3, #1
 80003b6:	6413      	str	r3, [r2, #64]	; 0x40

    TIM2_GPIO_SETUP(); // Config PA1 alternate function
 80003b8:	f7ff ff82 	bl	80002c0 <TIM2_GPIO_SETUP>

    // Timer base configuration
    TIM2->PSC = 84 - 1;        // 1 MHz timer clock
 80003bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003c0:	2253      	movs	r2, #83	; 0x53
 80003c2:	629a      	str	r2, [r3, #40]	; 0x28
    TIM2->ARR = 0xFFFFFFFF;    // Max ARR
 80003c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003c8:	f04f 32ff 	mov.w	r2, #4294967295
 80003cc:	62da      	str	r2, [r3, #44]	; 0x2c

    // Capture on channel 2 (TI2)
    TIM2->CCMR1 |= (1 << 8);   // CC2S = 01 (Input on TI2)
 80003ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003d2:	699b      	ldr	r3, [r3, #24]
 80003d4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80003dc:	6193      	str	r3, [r2, #24]
    TIM2->CCER  &= ~(1 << 5);  // CC2P = 0 (rising edge)
 80003de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003e2:	6a1b      	ldr	r3, [r3, #32]
 80003e4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003e8:	f023 0320 	bic.w	r3, r3, #32
 80003ec:	6213      	str	r3, [r2, #32]

    // Enable capture from channel 2
    TIM2->CCER |= (1 << 4);    // CC2E
 80003ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003f2:	6a1b      	ldr	r3, [r3, #32]
 80003f4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003f8:	f043 0310 	orr.w	r3, r3, #16
 80003fc:	6213      	str	r3, [r2, #32]

    // Enable capture interrupt (optional)
    TIM2->DIER |= (1 << 2);    // CC2IE
 80003fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000402:	68db      	ldr	r3, [r3, #12]
 8000404:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000408:	f043 0304 	orr.w	r3, r3, #4
 800040c:	60d3      	str	r3, [r2, #12]

    // Start timer
    TIM2->CR1 |= (1 << 0);     // CEN
 800040e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000418:	f043 0301 	orr.w	r3, r3, #1
 800041c:	6013      	str	r3, [r2, #0]
}
 800041e:	bf00      	nop
 8000420:	bd80      	pop	{r7, pc}
 8000422:	bf00      	nop
 8000424:	40023800 	.word	0x40023800

08000428 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000428:	b480      	push	{r7}
 800042a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800042c:	4b06      	ldr	r3, [pc, #24]	; (8000448 <HAL_IncTick+0x20>)
 800042e:	781b      	ldrb	r3, [r3, #0]
 8000430:	461a      	mov	r2, r3
 8000432:	4b06      	ldr	r3, [pc, #24]	; (800044c <HAL_IncTick+0x24>)
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	4413      	add	r3, r2
 8000438:	4a04      	ldr	r2, [pc, #16]	; (800044c <HAL_IncTick+0x24>)
 800043a:	6013      	str	r3, [r2, #0]
}
 800043c:	bf00      	nop
 800043e:	46bd      	mov	sp, r7
 8000440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000444:	4770      	bx	lr
 8000446:	bf00      	nop
 8000448:	20000000 	.word	0x20000000
 800044c:	20000024 	.word	0x20000024

08000450 <__libc_init_array>:
 8000450:	b570      	push	{r4, r5, r6, lr}
 8000452:	4d0d      	ldr	r5, [pc, #52]	; (8000488 <__libc_init_array+0x38>)
 8000454:	4c0d      	ldr	r4, [pc, #52]	; (800048c <__libc_init_array+0x3c>)
 8000456:	1b64      	subs	r4, r4, r5
 8000458:	10a4      	asrs	r4, r4, #2
 800045a:	2600      	movs	r6, #0
 800045c:	42a6      	cmp	r6, r4
 800045e:	d109      	bne.n	8000474 <__libc_init_array+0x24>
 8000460:	4d0b      	ldr	r5, [pc, #44]	; (8000490 <__libc_init_array+0x40>)
 8000462:	4c0c      	ldr	r4, [pc, #48]	; (8000494 <__libc_init_array+0x44>)
 8000464:	f000 f818 	bl	8000498 <_init>
 8000468:	1b64      	subs	r4, r4, r5
 800046a:	10a4      	asrs	r4, r4, #2
 800046c:	2600      	movs	r6, #0
 800046e:	42a6      	cmp	r6, r4
 8000470:	d105      	bne.n	800047e <__libc_init_array+0x2e>
 8000472:	bd70      	pop	{r4, r5, r6, pc}
 8000474:	f855 3b04 	ldr.w	r3, [r5], #4
 8000478:	4798      	blx	r3
 800047a:	3601      	adds	r6, #1
 800047c:	e7ee      	b.n	800045c <__libc_init_array+0xc>
 800047e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000482:	4798      	blx	r3
 8000484:	3601      	adds	r6, #1
 8000486:	e7f2      	b.n	800046e <__libc_init_array+0x1e>
 8000488:	080004b0 	.word	0x080004b0
 800048c:	080004b0 	.word	0x080004b0
 8000490:	080004b0 	.word	0x080004b0
 8000494:	080004b4 	.word	0x080004b4

08000498 <_init>:
 8000498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800049a:	bf00      	nop
 800049c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800049e:	bc08      	pop	{r3}
 80004a0:	469e      	mov	lr, r3
 80004a2:	4770      	bx	lr

080004a4 <_fini>:
 80004a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004a6:	bf00      	nop
 80004a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004aa:	bc08      	pop	{r3}
 80004ac:	469e      	mov	lr, r3
 80004ae:	4770      	bx	lr
